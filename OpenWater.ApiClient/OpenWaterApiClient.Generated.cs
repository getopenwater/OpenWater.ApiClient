//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using OpenWater.ApiClient.Definitions;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace OpenWater.ApiClient
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v9.0.0.0))")]
    public sealed partial class OpenWaterApiClient 
    {
        private string _baseUrl = "";
        private OpenWater.ApiClient.OpenWaterHttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        private OpenWaterApiClient(string baseUrl, OpenWater.ApiClient.OpenWaterHttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        private Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(OpenWater.ApiClient.OpenWaterHttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(OpenWater.ApiClient.OpenWaterHttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(OpenWater.ApiClient.OpenWaterHttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Gets list of applications</summary>
        /// <param name="programId">Program Id</param>
        /// <param name="userId">User Id</param>
        /// <param name="startedAtUtc">Started at date (UTC)</param>
        /// <param name="finalizedAtUtc">Finalized at date (UTC)</param>
        /// <param name="lastModifiedSinceUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Application.PagingResponseApplicationListItemModel GetApplications(int? programId = null, int? userId = null, System.DateTimeOffset? startedAtUtc = null, System.DateTimeOffset? finalizedAtUtc = null, System.DateTimeOffset? lastModifiedSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetApplicationsAsync(programId, userId, startedAtUtc, finalizedAtUtc, lastModifiedSinceUtc, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets list of applications</summary>
        /// <param name="programId">Program Id</param>
        /// <param name="userId">User Id</param>
        /// <param name="startedAtUtc">Started at date (UTC)</param>
        /// <param name="finalizedAtUtc">Finalized at date (UTC)</param>
        /// <param name="lastModifiedSinceUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Application.PagingResponseApplicationListItemModel> GetApplicationsAsync(int? programId = null, int? userId = null, System.DateTimeOffset? startedAtUtc = null, System.DateTimeOffset? finalizedAtUtc = null, System.DateTimeOffset? lastModifiedSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications?");
            if (programId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("programId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (userId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startedAtUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startedAtUtc") + "=").Append(System.Uri.EscapeDataString(startedAtUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (finalizedAtUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("finalizedAtUtc") + "=").Append(System.Uri.EscapeDataString(finalizedAtUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedSinceUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedSinceUtc") + "=").Append(System.Uri.EscapeDataString(lastModifiedSinceUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Application.PagingResponseApplicationListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Application.PagingResponseApplicationListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates an application</summary>
        /// <param name="model">Data for application creation</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Application.DetailsResponse CreateApplication(Application.CreateRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateApplicationAsync(model, suppressFormValidation, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates an application</summary>
        /// <param name="model">Data for application creation</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Application.DetailsResponse> CreateApplicationAsync(Application.CreateRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications?");
            if (suppressFormValidation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suppressFormValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suppressFormValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Application.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Application.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a certain application by application id</summary>
        /// <param name="id">Application Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Application.DetailsResponse GetApplicationById(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetApplicationByIdAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a certain application by application id</summary>
        /// <param name="id">Application Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Application.DetailsResponse> GetApplicationByIdAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Application.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Application.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a certain application category</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UpdateApplicationCategory(int applicationId, Application.UpdateApplicationCategoryRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateApplicationCategoryAsync(applicationId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a certain application category</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateApplicationCategoryAsync(int applicationId, Application.UpdateApplicationCategoryRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/Category");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a finalized round submission status of a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void ChangeFinalizedRoundSubmissionStatus(int applicationId, int roundId, Application.ChangeFinalizedRoundSubmissionStatusRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await ChangeFinalizedRoundSubmissionStatusAsync(applicationId, roundId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a finalized round submission status of a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ChangeFinalizedRoundSubmissionStatusAsync(int applicationId, int roundId, Application.ChangeFinalizedRoundSubmissionStatusRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/round/{roundId}/Status");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{roundId}", System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Finalizes a submission of a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void FinalizeRoundSubmission(int applicationId, int roundId, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await FinalizeRoundSubmissionAsync(applicationId, roundId, suppressFormValidation, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Finalizes a submission of a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task FinalizeRoundSubmissionAsync(int applicationId, int roundId, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/round/{roundId}/Finalize?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{roundId}", System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture)));
            if (suppressFormValidation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suppressFormValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suppressFormValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Allows a user to make edits for a certain round submission</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void AllowUserToUpdateFinalizedRoundSubmission(int applicationId, int roundId, Application.AllowUserToUpdateFinalizedRoundSubmissionRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await AllowUserToUpdateFinalizedRoundSubmissionAsync(applicationId, roundId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Allows a user to make edits for a certain round submission</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AllowUserToUpdateFinalizedRoundSubmissionAsync(int applicationId, int roundId, Application.AllowUserToUpdateFinalizedRoundSubmissionRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/round/{roundId}/AllowEdits");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{roundId}", System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates winner assignment of an application in a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update winner assignment</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void SetWinnerStatusForApplicationInRound(int applicationId, int roundId, Application.SetWinnerStatusForApplicationInRoundRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await SetWinnerStatusForApplicationInRoundAsync(applicationId, roundId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates winner assignment of an application in a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update winner assignment</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SetWinnerStatusForApplicationInRoundAsync(int applicationId, int roundId, Application.SetWinnerStatusForApplicationInRoundRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/round/{roundId}/WinnerAssignment");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{roundId}", System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates forwarding state of an application in a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update winner assignment</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void SetForwardingStatusForApplicationInRound(int applicationId, int roundId, Application.SetForwardingStatusForApplicationInRoundRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await SetForwardingStatusForApplicationInRoundAsync(applicationId, roundId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates forwarding state of an application in a certain round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="model">Data to update winner assignment</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SetForwardingStatusForApplicationInRoundAsync(int applicationId, int roundId, Application.SetForwardingStatusForApplicationInRoundRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/round/{roundId}/Forwarding");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{roundId}", System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates round submission form field values</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="model">Data to update form</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UpdateRoundSubmissionFormValues(int applicationId, Application.UpdateRoundSubmissionFormValuesRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateRoundSubmissionFormValuesAsync(applicationId, model, suppressFormValidation, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates round submission form field values</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="model">Data to update form</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateRoundSubmissionFormValuesAsync(int applicationId, Application.UpdateRoundSubmissionFormValuesRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/SubmissionFormValues?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            if (suppressFormValidation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suppressFormValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suppressFormValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a collaborator for a certain application</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="model">Data to create from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void CreateApplicationCollaborator(int applicationId, Collaborator.CreateRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await CreateApplicationCollaboratorAsync(applicationId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a collaborator for a certain application</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="model">Data to create from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CreateApplicationCollaboratorAsync(int applicationId, Collaborator.CreateRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/Collaborators");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes a collaborator of a certain application</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="id">Collaborator id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void DeleteApplicationCollaborator(int applicationId, int id, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await DeleteApplicationCollaboratorAsync(applicationId, id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a collaborator of a certain application</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="id">Collaborator id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteApplicationCollaboratorAsync(int applicationId, int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/{applicationId}/Collaborators/{id}");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get list of deleted applications</summary>
        /// <param name="programId">Program Id</param>
        /// <param name="deletedSinceUtc">Deleted since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public DeletedApplication.PagingResponseDeletedApplicationListItem GetDeletedApplications(int? programId = null, System.DateTimeOffset? deletedSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetDeletedApplicationsAsync(programId, deletedSinceUtc, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of deleted applications</summary>
        /// <param name="programId">Program Id</param>
        /// <param name="deletedSinceUtc">Deleted since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeletedApplication.PagingResponseDeletedApplicationListItem> GetDeletedApplicationsAsync(int? programId = null, System.DateTimeOffset? deletedSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Applications/DeletedData?");
            if (programId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("programId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deletedSinceUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deletedSinceUtc") + "=").Append(System.Uri.EscapeDataString(deletedSinceUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeletedApplication.PagingResponseDeletedApplicationListItem>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeletedApplication.PagingResponseDeletedApplicationListItem);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets job details</summary>
        /// <param name="id">Job Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public BackgroundJob.DetailsResponse GetJobById(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetJobByIdAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets job details</summary>
        /// <param name="id">Job Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BackgroundJob.DetailsResponse> GetJobByIdAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Jobs/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BackgroundJob.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BackgroundJob.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets filtered evaluations</summary>
        /// <param name="programId">Program id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="applicationId">Application id</param>
        /// <param name="judgeEmail">Judge email</param>
        /// <param name="lastModifiedSinceUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Evaluation.PagingResponseEvaluationListItemModel GetEvaluations(int? programId = null, int? roundId = null, int? applicationId = null, string judgeEmail = null, System.DateTimeOffset? lastModifiedSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetEvaluationsAsync(programId, roundId, applicationId, judgeEmail, lastModifiedSinceUtc, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets filtered evaluations</summary>
        /// <param name="programId">Program id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="applicationId">Application id</param>
        /// <param name="judgeEmail">Judge email</param>
        /// <param name="lastModifiedSinceUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Evaluation.PagingResponseEvaluationListItemModel> GetEvaluationsAsync(int? programId = null, int? roundId = null, int? applicationId = null, string judgeEmail = null, System.DateTimeOffset? lastModifiedSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Evaluations?");
            if (programId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("programId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (roundId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("roundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (applicationId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("applicationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (judgeEmail != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("judgeEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judgeEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedSinceUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedSinceUtc") + "=").Append(System.Uri.EscapeDataString(lastModifiedSinceUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Evaluation.PagingResponseEvaluationListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Evaluation.PagingResponseEvaluationListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets evaluation by id</summary>
        /// <param name="id">Evaluation id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Evaluation.DetailsResponse GetEvaluationById(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetEvaluationByIdAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets evaluation by id</summary>
        /// <param name="id">Evaluation id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Evaluation.DetailsResponse> GetEvaluationByIdAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Evaluations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Evaluation.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Evaluation.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a certain evaluation</summary>
        /// <param name="id">Evaluation id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UpdateEvaluationForm(int id, Evaluation.UpdateEvaluationFormRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateEvaluationFormAsync(id, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a certain evaluation</summary>
        /// <param name="id">Evaluation id</param>
        /// <param name="model">Data to update from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateEvaluationFormAsync(int id, Evaluation.UpdateEvaluationFormRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Evaluations/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets invoices</summary>
        /// <param name="programId">Program id</param>
        /// <param name="isPaid">Paid only (is 'true' by default)</param>
        /// <param name="mostRecentTransactionSinceUtc">Most recent transaction since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Invoice.PagingResponseInvoiceListItemModel GetInvoices(int? programId = null, bool? isPaid = null, System.DateTimeOffset? mostRecentTransactionSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetInvoicesAsync(programId, isPaid, mostRecentTransactionSinceUtc, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets invoices</summary>
        /// <param name="programId">Program id</param>
        /// <param name="isPaid">Paid only (is 'true' by default)</param>
        /// <param name="mostRecentTransactionSinceUtc">Most recent transaction since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Invoice.PagingResponseInvoiceListItemModel> GetInvoicesAsync(int? programId = null, bool? isPaid = null, System.DateTimeOffset? mostRecentTransactionSinceUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Invoices?");
            if (programId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("programId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isPaid != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isPaid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isPaid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mostRecentTransactionSinceUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mostRecentTransactionSinceUtc") + "=").Append(System.Uri.EscapeDataString(mostRecentTransactionSinceUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice.PagingResponseInvoiceListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Invoice.PagingResponseInvoiceListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a certain invoice</summary>
        /// <param name="id">Invoice Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Invoice.DetailsResponse GetInvoiceById(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetInvoiceByIdAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a certain invoice</summary>
        /// <param name="id">Invoice Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Invoice.DetailsResponse> GetInvoiceByIdAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Invoices/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Invoice.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets billing line items</summary>
        /// <param name="lastModifiedUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Invoice.PagingResponseBillingLineItemListItemModel GetBillingLineItems(System.DateTimeOffset? lastModifiedUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetBillingLineItemsAsync(lastModifiedUtc, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets billing line items</summary>
        /// <param name="lastModifiedUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Invoice.PagingResponseBillingLineItemListItemModel> GetBillingLineItemsAsync(System.DateTimeOffset? lastModifiedUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Invoices/BillingLineItems?");
            if (lastModifiedUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUtc") + "=").Append(System.Uri.EscapeDataString(lastModifiedUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice.PagingResponseBillingLineItemListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Invoice.PagingResponseBillingLineItemListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets payments</summary>
        /// <param name="lastModifiedUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Invoice.PagingResponsePaymentListItemModel GetPayments(System.DateTimeOffset? lastModifiedUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetPaymentsAsync(lastModifiedUtc, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets payments</summary>
        /// <param name="lastModifiedUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Invoice.PagingResponsePaymentListItemModel> GetPaymentsAsync(System.DateTimeOffset? lastModifiedUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Invoices/Payments?");
            if (lastModifiedUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUtc") + "=").Append(System.Uri.EscapeDataString(lastModifiedUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice.PagingResponsePaymentListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Invoice.PagingResponsePaymentListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets refunds</summary>
        /// <param name="lastModifiedUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Invoice.PagingResponseRefundListItemModel GetRefunds(System.DateTimeOffset? lastModifiedUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetRefundsAsync(lastModifiedUtc, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets refunds</summary>
        /// <param name="lastModifiedUtc">Last modified since date (UTC)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Invoice.PagingResponseRefundListItemModel> GetRefundsAsync(System.DateTimeOffset? lastModifiedUtc = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Invoices/Refunds?");
            if (lastModifiedUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedUtc") + "=").Append(System.Uri.EscapeDataString(lastModifiedUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice.PagingResponseRefundListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Invoice.PagingResponseRefundListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Processes a payment by check</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Invoice.PayByCheckResponse ProcessPaymentByCheck(int invoiceId, Invoice.PayByCheckRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ProcessPaymentByCheckAsync(invoiceId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Processes a payment by check</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Invoice.PayByCheckResponse> ProcessPaymentByCheckAsync(int invoiceId, Invoice.PayByCheckRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (invoiceId == null)
                throw new System.ArgumentNullException("invoiceId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Invoices/{invoiceId}/PayByCheck");
            urlBuilder_.Replace("{invoiceId}", System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Invoice.PayByCheckResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OpenWaterApiException("A server side error occurred.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Invoice.PayByCheckResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get list of judges who are assigned to the round</summary>
        /// <param name="roundId">Round Id</param>
        /// <param name="judgeFirstName">Judge first name</param>
        /// <param name="judgeLastName">Judge last name</param>
        /// <param name="judgeEmail">Judge email</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public JudgeAssignment.PagingResponseJudgeListItemModel GetAssignedToRoundJudges(int roundId, string judgeFirstName = null, string judgeLastName = null, string judgeEmail = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAssignedToRoundJudgesAsync(roundId, judgeFirstName, judgeLastName, judgeEmail, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get list of judges who are assigned to the round</summary>
        /// <param name="roundId">Round Id</param>
        /// <param name="judgeFirstName">Judge first name</param>
        /// <param name="judgeLastName">Judge last name</param>
        /// <param name="judgeEmail">Judge email</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JudgeAssignment.PagingResponseJudgeListItemModel> GetAssignedToRoundJudgesAsync(int roundId, string judgeFirstName = null, string judgeLastName = null, string judgeEmail = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/AssignedToRound?");
            urlBuilder_.Append(System.Uri.EscapeDataString("roundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (judgeFirstName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("judgeFirstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judgeFirstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (judgeLastName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("judgeLastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judgeLastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (judgeEmail != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("judgeEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judgeEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JudgeAssignment.PagingResponseJudgeListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JudgeAssignment.PagingResponseJudgeListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Assigns a judge to an application in a certain round</summary>
        /// <param name="model">Data for an assignment creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void AssignJudgeToApplication(JudgeAssignment.AssignJudgeToApplicationRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await AssignJudgeToApplicationAsync(model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assigns a judge to an application in a certain round</summary>
        /// <param name="model">Data for an assignment creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignJudgeToApplicationAsync(JudgeAssignment.AssignJudgeToApplicationRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/Application");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes judge assignment on an application</summary>
        /// <param name="judgeUserId">User id of a judge</param>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UnassignJudgeFromApplication(int judgeUserId, int applicationId, int roundId, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UnassignJudgeFromApplicationAsync(judgeUserId, applicationId, roundId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes judge assignment on an application</summary>
        /// <param name="judgeUserId">User id of a judge</param>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UnassignJudgeFromApplicationAsync(int judgeUserId, int applicationId, int roundId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (judgeUserId == null)
                throw new System.ArgumentNullException("judgeUserId");
    
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/Application?");
            urlBuilder_.Append(System.Uri.EscapeDataString("judgeUserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judgeUserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("applicationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("roundId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Assigns a judge to a certain judge team</summary>
        /// <param name="model">Data for an assignment creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void AssignJudgeToJudgeTeam(JudgeAssignment.AssignJudgeToJudgeTeamRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await AssignJudgeToJudgeTeamAsync(model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Assigns a judge to a certain judge team</summary>
        /// <param name="model">Data for an assignment creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AssignJudgeToJudgeTeamAsync(JudgeAssignment.AssignJudgeToJudgeTeamRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/JudgeTeam");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes judge assignment on a judge team</summary>
        /// <param name="judgeUserId">User id of a judge</param>
        /// <param name="judgeTeamId">Judge team id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UnassignJudgeFromJudgeTeam(int? judgeUserId = null, int? judgeTeamId = null, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UnassignJudgeFromJudgeTeamAsync(judgeUserId, judgeTeamId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes judge assignment on a judge team</summary>
        /// <param name="judgeUserId">User id of a judge</param>
        /// <param name="judgeTeamId">Judge team id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UnassignJudgeFromJudgeTeamAsync(int? judgeUserId = null, int? judgeTeamId = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/JudgeTeam?");
            if (judgeUserId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("judgeUserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judgeUserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (judgeTeamId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("judgeTeamId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judgeTeamId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Begins a job to apply all judge assignment rules in a certain round</summary>
        /// <param name="model">Data for an assignment creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public JudgeAssignment.ApplyAllBulkJudgeAssignmentRulesInRoundResponse ApplyBulkJudgeAssignmentRulesInRound(JudgeAssignment.ApplyAllBulkJudgeAssignmentRulesInRoundRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ApplyBulkJudgeAssignmentRulesInRoundAsync(model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Begins a job to apply all judge assignment rules in a certain round</summary>
        /// <param name="model">Data for an assignment creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JudgeAssignment.ApplyAllBulkJudgeAssignmentRulesInRoundResponse> ApplyBulkJudgeAssignmentRulesInRoundAsync(JudgeAssignment.ApplyAllBulkJudgeAssignmentRulesInRoundRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/AssignmentRules");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JudgeAssignment.ApplyAllBulkJudgeAssignmentRulesInRoundResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JudgeAssignment.ApplyAllBulkJudgeAssignmentRulesInRoundResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets all judges assigned to a judge team</summary>
        /// <param name="judgeTeamId">Judge team id</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public JudgeAssignment.PagingResponseJudgeListItemModel GetAssignedToJudgeTeamJudges(int judgeTeamId, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAssignedToJudgeTeamJudgesAsync(judgeTeamId, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all judges assigned to a judge team</summary>
        /// <param name="judgeTeamId">Judge team id</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JudgeAssignment.PagingResponseJudgeListItemModel> GetAssignedToJudgeTeamJudgesAsync(int judgeTeamId, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (judgeTeamId == null)
                throw new System.ArgumentNullException("judgeTeamId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/AssignedToJudgeTeam/{judgeTeamId}?");
            urlBuilder_.Replace("{judgeTeamId}", System.Uri.EscapeDataString(ConvertToString(judgeTeamId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JudgeAssignment.PagingResponseJudgeListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JudgeAssignment.PagingResponseJudgeListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets all judge assignments for a certain application in round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public JudgeAssignment.PagingResponseJudgeListItemModel GetAssignedToApplicationJudges(int applicationId, int roundId, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAssignedToApplicationJudgesAsync(applicationId, roundId, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all judge assignments for a certain application in round</summary>
        /// <param name="applicationId">Application id</param>
        /// <param name="roundId">Round id</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JudgeAssignment.PagingResponseJudgeListItemModel> GetAssignedToApplicationJudgesAsync(int applicationId, int roundId, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (applicationId == null)
                throw new System.ArgumentNullException("applicationId");
    
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeAssignments/Rounds/{roundId}/AssignedToApplication/{applicationId}?");
            urlBuilder_.Replace("{applicationId}", System.Uri.EscapeDataString(ConvertToString(applicationId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{roundId}", System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture)));
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JudgeAssignment.PagingResponseJudgeListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JudgeAssignment.PagingResponseJudgeListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a judge program profile</summary>
        /// <param name="judgeUserId">Judge user id</param>
        /// <param name="programId">Program id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Judge.ProgramProfileValuesResponse GetJudgeProgramProfileValues(int judgeUserId, int programId, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetJudgeProgramProfileValuesAsync(judgeUserId, programId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a judge program profile</summary>
        /// <param name="judgeUserId">Judge user id</param>
        /// <param name="programId">Program id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Judge.ProgramProfileValuesResponse> GetJudgeProgramProfileValuesAsync(int judgeUserId, int programId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (judgeUserId == null)
                throw new System.ArgumentNullException("judgeUserId");
    
            if (programId == null)
                throw new System.ArgumentNullException("programId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Judges/{judgeUserId}/ProgramProfileValues/{programId}");
            urlBuilder_.Replace("{judgeUserId}", System.Uri.EscapeDataString(ConvertToString(judgeUserId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{programId}", System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Judge.ProgramProfileValuesResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Judge.ProgramProfileValuesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a judge team for a certain round</summary>
        /// <param name="model">Data for a judge team creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public JudgeTeam.CreateResponse CreateJudgeTeam(JudgeTeam.CreateRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateJudgeTeamAsync(model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a judge team for a certain round</summary>
        /// <param name="model">Data for a judge team creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JudgeTeam.CreateResponse> CreateJudgeTeamAsync(JudgeTeam.CreateRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/JudgeTeams");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JudgeTeam.CreateResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JudgeTeam.CreateResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets media by url</summary>
        /// <param name="id">Media id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Media.DetailsResponse GetMediaById(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetMediaByIdAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets media by url</summary>
        /// <param name="id">Media id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Media.DetailsResponse> GetMediaByIdAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Media/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Media.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Media.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates media</summary>
        /// <param name="model">Data to create from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Media.CreateResponse CreateMedia(Media.CreateRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateMediaAsync(model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates media</summary>
        /// <param name="model">Data to create from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Media.CreateResponse> CreateMediaAsync(Media.CreateRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Media");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Media.CreateResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Media.CreateResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets organization timezone</summary>
        /// <param name="organizationId">Organization id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Organization.TimeZoneResponse GetOrganizationTimeZone(int organizationId, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetOrganizationTimeZoneAsync(organizationId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets organization timezone</summary>
        /// <param name="organizationId">Organization id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Organization.TimeZoneResponse> GetOrganizationTimeZoneAsync(int organizationId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organizationId == null)
                throw new System.ArgumentNullException("organizationId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Organizations/{organizationId}/TimeZone");
            urlBuilder_.Replace("{organizationId}", System.Uri.EscapeDataString(ConvertToString(organizationId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Organization.TimeZoneResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Organization.TimeZoneResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets list of programs</summary>
        /// <param name="createdSinceUtc">Program created since date (UTC)</param>
        /// <param name="tag">Program tag</param>
        /// <param name="showArchived">Show archived programs (false by default)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Program.PagingResponseProgramListItemModel GetPrograms(System.DateTimeOffset? createdSinceUtc = null, string tag = null, bool? showArchived = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetProgramsAsync(createdSinceUtc, tag, showArchived, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets list of programs</summary>
        /// <param name="createdSinceUtc">Program created since date (UTC)</param>
        /// <param name="tag">Program tag</param>
        /// <param name="showArchived">Show archived programs (false by default)</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Program.PagingResponseProgramListItemModel> GetProgramsAsync(System.DateTimeOffset? createdSinceUtc = null, string tag = null, bool? showArchived = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Programs?");
            if (createdSinceUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("createdSinceUtc") + "=").Append(System.Uri.EscapeDataString(createdSinceUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tag != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("tag") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tag, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showArchived != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showArchived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showArchived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Program.PagingResponseProgramListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Program.PagingResponseProgramListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Begins a program template json export job</summary>
        /// <param name="programId">Program id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Program.ExportResponse ExportProgramTemplate(int programId, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ExportProgramTemplateAsync(programId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Begins a program template json export job</summary>
        /// <param name="programId">Program id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Program.ExportResponse> ExportProgramTemplateAsync(int programId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (programId == null)
                throw new System.ArgumentNullException("programId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Export/Program/{programId}");
            urlBuilder_.Replace("{programId}", System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Program.ExportResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Program.ExportResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Begins a program book json export job</summary>
        /// <param name="programId">Program id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Program.ExportResponse ExportProgramToProgramBook(int programId, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await ExportProgramToProgramBookAsync(programId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Begins a program book json export job</summary>
        /// <param name="programId">Program id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Program.ExportResponse> ExportProgramToProgramBookAsync(int programId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (programId == null)
                throw new System.ArgumentNullException("programId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Export/ProgramBook/{programId}");
            urlBuilder_.Replace("{programId}", System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Program.ExportResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Program.ExportResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a session form template</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Program.FormTemplateResponse GetSessionFormTemplate(int programId, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetSessionFormTemplateAsync(programId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a session form template</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Program.FormTemplateResponse> GetSessionFormTemplateAsync(int programId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (programId == null)
                throw new System.ArgumentNullException("programId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Programs/{programId}/SessionFormTemplate");
            urlBuilder_.Replace("{programId}", System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Program.FormTemplateResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Program.FormTemplateResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a judge profile form template</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Program.FormTemplateResponse GetJudgeProfileFormTemplate(int programId, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetJudgeProfileFormTemplateAsync(programId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a judge profile form template</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Program.FormTemplateResponse> GetJudgeProfileFormTemplateAsync(int programId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (programId == null)
                throw new System.ArgumentNullException("programId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Programs/{programId}/JudgeProfileFormTemplate");
            urlBuilder_.Replace("{programId}", System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Program.FormTemplateResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Program.FormTemplateResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Starts a report execution</summary>
        /// <param name="reportId">Report id</param>
        /// <param name="model">Report data</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public ReportRunner.RunResponse RunReport(int reportId, ReportRunner.RunRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await RunReportAsync(reportId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Starts a report execution</summary>
        /// <param name="reportId">Report id</param>
        /// <param name="model">Report data</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ReportRunner.RunResponse> RunReportAsync(int reportId, ReportRunner.RunRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (reportId == null)
                throw new System.ArgumentNullException("reportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Export/Reports/{reportId}");
            urlBuilder_.Replace("{reportId}", System.Uri.EscapeDataString(ConvertToString(reportId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReportRunner.RunResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ReportRunner.RunResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets an application form template of a certain round</summary>
        /// <param name="roundId">Round id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Round.SubmissionFormTemplateResponse GetSubmissionFormTemplate(int roundId, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetSubmissionFormTemplateAsync(roundId, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets an application form template of a certain round</summary>
        /// <param name="roundId">Round id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Round.SubmissionFormTemplateResponse> GetSubmissionFormTemplateAsync(int roundId, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (roundId == null)
                throw new System.ArgumentNullException("roundId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Rounds/{roundId}/SubmissionFormTemplate");
            urlBuilder_.Replace("{roundId}", System.Uri.EscapeDataString(ConvertToString(roundId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Round.SubmissionFormTemplateResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Round.SubmissionFormTemplateResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a session chair</summary>
        /// <param name="model">Data to create from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void CreateSessionChair(SessionChair.CreateRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await CreateSessionChairAsync(model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a session chair</summary>
        /// <param name="model">Data to create from</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task CreateSessionChairAsync(SessionChair.CreateRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/SessionChairs");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes a session chair</summary>
        /// <param name="id">Session chair id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void DeleteSessionChair(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await DeleteSessionChairAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a session chair</summary>
        /// <param name="id">Session chair id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteSessionChairAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/SessionChairs/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets sessions</summary>
        /// <param name="programId">Program Id</param>
        /// <param name="lastModifiedSinceUtc">Session last modified since date (UTC)</param>
        /// <param name="sessionChairEmail">Session chair email</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Session.PagingResponseSessionListItemModel GetSessions(int? programId = null, System.DateTimeOffset? lastModifiedSinceUtc = null, string sessionChairEmail = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetSessionsAsync(programId, lastModifiedSinceUtc, sessionChairEmail, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets sessions</summary>
        /// <param name="programId">Program Id</param>
        /// <param name="lastModifiedSinceUtc">Session last modified since date (UTC)</param>
        /// <param name="sessionChairEmail">Session chair email</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Session.PagingResponseSessionListItemModel> GetSessionsAsync(int? programId = null, System.DateTimeOffset? lastModifiedSinceUtc = null, string sessionChairEmail = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Sessions?");
            if (programId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("programId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(programId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedSinceUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedSinceUtc") + "=").Append(System.Uri.EscapeDataString(lastModifiedSinceUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sessionChairEmail != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sessionChairEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sessionChairEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Session.PagingResponseSessionListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Session.PagingResponseSessionListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a session</summary>
        /// <param name="model">Data for session creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Session.DetailsResponse CreateSession(Session.CreateRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateSessionAsync(model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a session</summary>
        /// <param name="model">Data for session creation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Session.DetailsResponse> CreateSessionAsync(Session.CreateRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Sessions");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Session.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Session.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a certain session</summary>
        /// <param name="id">Session Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public Session.DetailsResponse GetSessionById(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetSessionByIdAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a certain session</summary>
        /// <param name="id">Session Id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Session.DetailsResponse> GetSessionByIdAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Sessions/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Session.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Session.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes a certain session</summary>
        /// <param name="id">Session id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void DeleteSession(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await DeleteSessionAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a certain session</summary>
        /// <param name="id">Session id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteSessionAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Sessions/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a session form values</summary>
        /// <param name="sessionId">Session id</param>
        /// <param name="model">Data to update form</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UpdateSessionFormValues(int sessionId, Session.UpdateSessionFormValuesRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateSessionFormValuesAsync(sessionId, model, suppressFormValidation, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a session form values</summary>
        /// <param name="sessionId">Session id</param>
        /// <param name="model">Data to update form</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateSessionFormValuesAsync(int sessionId, Session.UpdateSessionFormValuesRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (sessionId == null)
                throw new System.ArgumentNullException("sessionId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Sessions/{sessionId}/FormFields?");
            urlBuilder_.Replace("{sessionId}", System.Uri.EscapeDataString(ConvertToString(sessionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (suppressFormValidation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suppressFormValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suppressFormValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets filtered users</summary>
        /// <param name="firstName">User has a first name like</param>
        /// <param name="lastName">User has a last name like</param>
        /// <param name="company">User has a company like</param>
        /// <param name="email">User has an email like</param>
        /// <param name="thirdPartyId">User 3rd party id</param>
        /// <param name="lastModifiedSinceUtc">Last modified since date (UTC)</param>
        /// <param name="isApplicant">User is an applicant</param>
        /// <param name="isJudge">User is a judge</param>
        /// <param name="isSessionChair">User is a session chair</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public User.PagingResponseUserListItemModel GetUsers(string firstName = null, string lastName = null, string company = null, string email = null, string thirdPartyId = null, System.DateTimeOffset? lastModifiedSinceUtc = null, bool? isApplicant = null, bool? isJudge = null, bool? isSessionChair = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetUsersAsync(firstName, lastName, company, email, thirdPartyId, lastModifiedSinceUtc, isApplicant, isJudge, isSessionChair, pageIndex, pageSize, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets filtered users</summary>
        /// <param name="firstName">User has a first name like</param>
        /// <param name="lastName">User has a last name like</param>
        /// <param name="company">User has a company like</param>
        /// <param name="email">User has an email like</param>
        /// <param name="thirdPartyId">User 3rd party id</param>
        /// <param name="lastModifiedSinceUtc">Last modified since date (UTC)</param>
        /// <param name="isApplicant">User is an applicant</param>
        /// <param name="isJudge">User is a judge</param>
        /// <param name="isSessionChair">User is a session chair</param>
        /// <param name="pageIndex">Page index (0 by default)</param>
        /// <param name="pageSize">Page size (10 by default)</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User.PagingResponseUserListItemModel> GetUsersAsync(string firstName = null, string lastName = null, string company = null, string email = null, string thirdPartyId = null, System.DateTimeOffset? lastModifiedSinceUtc = null, bool? isApplicant = null, bool? isJudge = null, bool? isSessionChair = null, int? pageIndex = null, int? pageSize = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Users?");
            if (firstName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (company != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("company") + "=").Append(System.Uri.EscapeDataString(ConvertToString(company, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (email != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (thirdPartyId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("thirdPartyId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(thirdPartyId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastModifiedSinceUtc != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedSinceUtc") + "=").Append(System.Uri.EscapeDataString(lastModifiedSinceUtc.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isApplicant != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isApplicant") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isApplicant, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isJudge != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isJudge") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isJudge, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isSessionChair != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isSessionChair") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isSessionChair, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageIndex != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User.PagingResponseUserListItemModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(User.PagingResponseUserListItemModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates a user</summary>
        /// <param name="model">Data for user creation</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public User.DetailsResponse CreateUser(User.CreateRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateUserAsync(model, suppressFormValidation, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a user</summary>
        /// <param name="model">Data for user creation</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User.DetailsResponse> CreateUserAsync(User.CreateRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Users?");
            if (suppressFormValidation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suppressFormValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suppressFormValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(User.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets an existing user by id</summary>
        /// <param name="id">User id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public User.DetailsResponse GetUserById(int id, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetUserByIdAsync(id, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets an existing user by id</summary>
        /// <param name="id">User id</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User.DetailsResponse> GetUserByIdAsync(int id, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User.DetailsResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(User.DetailsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates a certain user</summary>
        /// <param name="id">User id</param>
        /// <param name="model">User data to update</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UpdateUser(int id, User.UpdateRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateUserAsync(id, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a certain user</summary>
        /// <param name="id">User id</param>
        /// <param name="model">User data to update</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateUserAsync(int id, User.UpdateRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Users/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates user profile form values</summary>
        /// <param name="userId">User id</param>
        /// <param name="model">Data to update form</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public void UpdateUserProfileFormValues(int userId, User.UpdateUserProfileFormValuesRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null)
        {
            System.Threading.Tasks.Task.Run(async () => await UpdateUserProfileFormValuesAsync(userId, model, suppressFormValidation, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates user profile form values</summary>
        /// <param name="userId">User id</param>
        /// <param name="model">Data to update form</param>
        /// <param name="suppressFormValidation">Suppress form validation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateUserProfileFormValuesAsync(int userId, User.UpdateUserProfileFormValuesRequest model, bool? suppressFormValidation = null, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Users/{userId}/ProfileFormValues?");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
            if (suppressFormValidation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suppressFormValidation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suppressFormValidation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Generates sso token for a certain user</summary>
        /// <param name="userId">User id</param>
        /// <param name="model">Optional data such as url to redirect after token generation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public User.GenerateUserSsoTokenResponse GenerateUserSsoToken(int userId, User.GenerateUserSsoTokenRequest model, string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GenerateUserSsoTokenAsync(userId, model, organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Generates sso token for a certain user</summary>
        /// <param name="userId">User id</param>
        /// <param name="model">Optional data such as url to redirect after token generation</param>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User.GenerateUserSsoTokenResponse> GenerateUserSsoTokenAsync(int userId, User.GenerateUserSsoTokenRequest model, string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Users/{userId}/SsoToken");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User.GenerateUserSsoTokenResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(User.GenerateUserSsoTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Gets a user profile form template</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public User.ProfileFormTemplateResponse GetUserProfileFormTemplate(string organizationCode = null, bool? suppressEmails = null)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetUserProfileFormTemplateAsync(organizationCode, suppressEmails, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a user profile form template</summary>
        /// <param name="organizationCode">Specify the organization code</param>
        /// <param name="suppressEmails">Specify whether email sending should be suppressed</param>
        /// <returns>Success</returns>
        /// <exception cref="OpenWaterApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<User.ProfileFormTemplateResponse> GetUserProfileFormTemplateAsync(string organizationCode = null, bool? suppressEmails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Users/ProfileFormTemplate");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (organizationCode != null)
                        request_.Headers.TryAddWithoutValidation("X-OrganizationCode", ConvertToString(organizationCode, System.Globalization.CultureInfo.InvariantCulture));
                    if (suppressEmails != null)
                        request_.Headers.TryAddWithoutValidation("X-SuppressEmails", ConvertToString(suppressEmails, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User.ProfileFormTemplateResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new OpenWaterApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(User.ProfileFormTemplateResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        private async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new OpenWaterApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new OpenWaterApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using OpenWater.ApiClient.Definitions;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace OpenWater.ApiClient.JudgeAssignment
{
    using System = global::System;
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApplyAllBulkJudgeAssignmentRulesInRoundRequest 
    {
        public ApplyAllBulkJudgeAssignmentRulesInRoundRequest() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public ApplyAllBulkJudgeAssignmentRulesInRoundRequest(int roundId)
        {
              RoundId = @roundId;
        }
    
        /// <summary>Round id</summary>
        [Newtonsoft.Json.JsonProperty("roundId", Required = Newtonsoft.Json.Required.Always)]
        public int RoundId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApplyAllBulkJudgeAssignmentRulesInRoundResponse 
    {
        public ApplyAllBulkJudgeAssignmentRulesInRoundResponse() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public ApplyAllBulkJudgeAssignmentRulesInRoundResponse(long jobId)
        {
              JobId = @jobId;
        }
    
        /// <summary>Bulk judge assignment job id</summary>
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long JobId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssignJudgeTeamManagerToJudgeTeamRequest 
    {
        public AssignJudgeTeamManagerToJudgeTeamRequest() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public AssignJudgeTeamManagerToJudgeTeamRequest(int judgeTeamId, int judgeUserId, System.Collections.Generic.ICollection<JudgeTeamManagerPermissions> permissions)
        {
              JudgeUserId = @judgeUserId;
              JudgeTeamId = @judgeTeamId;
              Permissions = @permissions;
        }
    
        /// <summary>Judge user id</summary>
        [Newtonsoft.Json.JsonProperty("judgeUserId", Required = Newtonsoft.Json.Required.Always)]
        public int JudgeUserId { get; set; }
    
        /// <summary>Judge team id</summary>
        [Newtonsoft.Json.JsonProperty("judgeTeamId", Required = Newtonsoft.Json.Required.Always)]
        public int JudgeTeamId { get; set; }
    
        /// <summary>Judge team manager permissions</summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<JudgeTeamManagerPermissions> Permissions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssignJudgeToApplicationRequest 
    {
        public AssignJudgeToApplicationRequest() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public AssignJudgeToApplicationRequest(int applicationId, int judgeUserId, int roundId)
        {
              ApplicationId = @applicationId;
              JudgeUserId = @judgeUserId;
              RoundId = @roundId;
        }
    
        /// <summary>Application id</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Always)]
        public int ApplicationId { get; set; }
    
        /// <summary>Judge user id</summary>
        [Newtonsoft.Json.JsonProperty("judgeUserId", Required = Newtonsoft.Json.Required.Always)]
        public int JudgeUserId { get; set; }
    
        /// <summary>Round id</summary>
        [Newtonsoft.Json.JsonProperty("roundId", Required = Newtonsoft.Json.Required.Always)]
        public int RoundId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssignJudgeToJudgeTeamRequest 
    {
        public AssignJudgeToJudgeTeamRequest() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public AssignJudgeToJudgeTeamRequest(int judgeTeamId, int judgeUserId)
        {
              JudgeUserId = @judgeUserId;
              JudgeTeamId = @judgeTeamId;
        }
    
        /// <summary>Judge user id</summary>
        [Newtonsoft.Json.JsonProperty("judgeUserId", Required = Newtonsoft.Json.Required.Always)]
        public int JudgeUserId { get; set; }
    
        /// <summary>Judge team id</summary>
        [Newtonsoft.Json.JsonProperty("judgeTeamId", Required = Newtonsoft.Json.Required.Always)]
        public int JudgeTeamId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AssignJudgeToRoundRequest 
    {
        public AssignJudgeToRoundRequest() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public AssignJudgeToRoundRequest(int judgeUserId, int roundId)
        {
              JudgeUserId = @judgeUserId;
              RoundId = @roundId;
        }
    
        /// <summary>Judge user id</summary>
        [Newtonsoft.Json.JsonProperty("judgeUserId", Required = Newtonsoft.Json.Required.Always)]
        public int JudgeUserId { get; set; }
    
        /// <summary>Round id</summary>
        [Newtonsoft.Json.JsonProperty("roundId", Required = Newtonsoft.Json.Required.Always)]
        public int RoundId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateBulkJudgeAssignmentRuleRequest 
    {
        public CreateBulkJudgeAssignmentRuleRequest() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public CreateBulkJudgeAssignmentRuleRequest(System.Collections.Generic.ICollection<int> applicationCategoryIdsToFilterBy, BulkJudgeAssignmentFilterType bulkJudgeAssignmentFilterType, BulkJudgeAssignmentType bulkJudgeAssignmentType, string description, System.Collections.Generic.ICollection<int> judgeTeamIdsToAssign, System.Collections.Generic.ICollection<int> judgeUserIdsToAssign, string name, int roundId, int? assignAtLeastNJudgesOnEachSubmission = null, int? assignAtLeastNJudgeTeamsOnEachSubmission = null, int? assignAtLeastNSubmissionsOnEachCertainJudge = null, int? assignAtLeastNSubmissionsOnEachJudge = null, int? assignAtLeastNSubmissionsOnEachJudgeTeamMember = null)
        {
              RoundId = @roundId;
              Name = @name;
              Description = @description;
              BulkJudgeAssignmentType = @bulkJudgeAssignmentType;
              BulkJudgeAssignmentFilterType = @bulkJudgeAssignmentFilterType;
              AssignAtLeastNJudgesOnEachSubmission = @assignAtLeastNJudgesOnEachSubmission;
              AssignAtLeastNSubmissionsOnEachJudge = @assignAtLeastNSubmissionsOnEachJudge;
              AssignAtLeastNSubmissionsOnEachCertainJudge = @assignAtLeastNSubmissionsOnEachCertainJudge;
              AssignAtLeastNSubmissionsOnEachJudgeTeamMember = @assignAtLeastNSubmissionsOnEachJudgeTeamMember;
              AssignAtLeastNJudgeTeamsOnEachSubmission = @assignAtLeastNJudgeTeamsOnEachSubmission;
              ApplicationCategoryIdsToFilterBy = @applicationCategoryIdsToFilterBy;
              JudgeUserIdsToAssign = @judgeUserIdsToAssign;
              JudgeTeamIdsToAssign = @judgeTeamIdsToAssign;
        }
    
        /// <summary>Round id</summary>
        [Newtonsoft.Json.JsonProperty("roundId", Required = Newtonsoft.Json.Required.Always)]
        public int RoundId { get; set; }
    
        /// <summary>Rule name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }
    
        /// <summary>Rule description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Assignment type</summary>
        [Newtonsoft.Json.JsonProperty("bulkJudgeAssignmentType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BulkJudgeAssignmentType BulkJudgeAssignmentType { get; set; }
    
        /// <summary>Filter type</summary>
        [Newtonsoft.Json.JsonProperty("bulkJudgeAssignmentFilterType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BulkJudgeAssignmentFilterType BulkJudgeAssignmentFilterType { get; set; }
    
        /// <summary>Ensure each Submission is judged at least by a certain number Judges</summary>
        [Newtonsoft.Json.JsonProperty("assignAtLeastNJudgesOnEachSubmission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignAtLeastNJudgesOnEachSubmission { get; set; }
    
        /// <summary>Ensure each Judge reviews at least a certain number of Submissions (leave blank for all)</summary>
        [Newtonsoft.Json.JsonProperty("assignAtLeastNSubmissionsOnEachJudge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignAtLeastNSubmissionsOnEachJudge { get; set; }
    
        /// <summary>Assign at least a certain number of Submissions to Judge (leave blank for all)</summary>
        [Newtonsoft.Json.JsonProperty("assignAtLeastNSubmissionsOnEachCertainJudge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignAtLeastNSubmissionsOnEachCertainJudge { get; set; }
    
        /// <summary>Assign at least a certain number of Submissions to Each Judge in team (leave blank for all Submissions)</summary>
        [Newtonsoft.Json.JsonProperty("assignAtLeastNSubmissionsOnEachJudgeTeamMember", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignAtLeastNSubmissionsOnEachJudgeTeamMember { get; set; }
    
        /// <summary>Ensure each Submission is judged at least by a certain number of Judge teams</summary>
        [Newtonsoft.Json.JsonProperty("assignAtLeastNJudgeTeamsOnEachSubmission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignAtLeastNJudgeTeamsOnEachSubmission { get; set; }
    
        /// <summary>Application category ids to filter by</summary>
        [Newtonsoft.Json.JsonProperty("applicationCategoryIdsToFilterBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ApplicationCategoryIdsToFilterBy { get; set; }
    
        /// <summary>Judge user ids to assign</summary>
        [Newtonsoft.Json.JsonProperty("judgeUserIdsToAssign", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> JudgeUserIdsToAssign { get; set; }
    
        /// <summary>Judge team ids to assign</summary>
        [Newtonsoft.Json.JsonProperty("judgeTeamIdsToAssign", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> JudgeTeamIdsToAssign { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateBulkJudgeAssignmentRuleResponse 
    {
        public CreateBulkJudgeAssignmentRuleResponse() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public CreateBulkJudgeAssignmentRuleResponse(int id)
        {
              Id = @id;
        }
    
        /// <summary>Judge assignment rule id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JudgeListItemModel 
    {
        public JudgeListItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public JudgeListItemModel(string email, string firstName, System.Collections.Generic.ICollection<JudgeTeamListItemModel> judgeTeams, string lastName, int userId)
        {
              UserId = @userId;
              FirstName = @firstName;
              LastName = @lastName;
              Email = @email;
              JudgeTeams = @judgeTeams;
        }
    
        /// <summary>User id</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UserId { get; set; }
    
        /// <summary>User first name</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        /// <summary>User last name</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        /// <summary>User email</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Judge teams where judge belongs to</summary>
        [Newtonsoft.Json.JsonProperty("judgeTeams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JudgeTeamListItemModel> JudgeTeams { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JudgeTeamListItemModel 
    {
        public JudgeTeamListItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public JudgeTeamListItemModel(int id, string name)
        {
              Id = @id;
              Name = @name;
        }
    
        /// <summary>Judge Team id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Judge team name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
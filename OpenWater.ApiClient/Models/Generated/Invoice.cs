//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using OpenWater.ApiClient.Definitions;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace OpenWater.ApiClient.Invoice
{
    using System = global::System;
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InvoiceListItemModel 
    {
        public InvoiceListItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public InvoiceListItemModel(System.DateTimeOffset createdAtUtc, int id, System.DateTimeOffset mostRecentTransactionDateUtc, int programId, string programCode = null, string thirdPartyCorporateId = null)
        {
              Id = @id;
              ProgramId = @programId;
              ProgramCode = @programCode;
              ThirdPartyCorporateId = @thirdPartyCorporateId;
              CreatedAtUtc = @createdAtUtc;
              MostRecentTransactionDateUtc = @mostRecentTransactionDateUtc;
        }
    
        /// <summary>Invoice id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Program id</summary>
        [Newtonsoft.Json.JsonProperty("programId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProgramId { get; set; }
    
        /// <summary>Program code</summary>
        [Newtonsoft.Json.JsonProperty("programCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgramCode { get; set; }
    
        /// <summary>User 3rd party unique id</summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyCorporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThirdPartyCorporateId { get; set; }
    
        /// <summary>Invoice created date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("createdAtUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAtUtc { get; set; }
    
        /// <summary>Invoice most recent transaction date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("mostRecentTransactionDateUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset MostRecentTransactionDateUtc { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DetailsResponse 
    {
        public DetailsResponse() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public DetailsResponse(System.Collections.Generic.ICollection<BillingLineItemModel> billingLineItems, string couponCode, string couponName, System.DateTimeOffset createdAtUtc, int id, System.DateTimeOffset mostRecentTransactionDateUtc, System.Collections.Generic.ICollection<PaymentModel> payments, int programId, System.Collections.Generic.ICollection<RefundModel> refunds, int roundId, double totalBilled, double totalPaid, double totalRefunded, int userId, string programCode = null, string thirdPartyCorporateId = null)
        {
              Id = @id;
              ProgramId = @programId;
              ProgramCode = @programCode;
              RoundId = @roundId;
              UserId = @userId;
              ThirdPartyCorporateId = @thirdPartyCorporateId;
              CouponName = @couponName;
              CouponCode = @couponCode;
              CreatedAtUtc = @createdAtUtc;
              MostRecentTransactionDateUtc = @mostRecentTransactionDateUtc;
              BillingLineItems = @billingLineItems;
              Payments = @payments;
              Refunds = @refunds;
              TotalBilled = @totalBilled;
              TotalPaid = @totalPaid;
              TotalRefunded = @totalRefunded;
        }
    
        /// <summary>Invoice id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Program id</summary>
        [Newtonsoft.Json.JsonProperty("programId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProgramId { get; set; }
    
        /// <summary>Program code</summary>
        [Newtonsoft.Json.JsonProperty("programCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgramCode { get; set; }
    
        /// <summary>Round id</summary>
        [Newtonsoft.Json.JsonProperty("roundId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RoundId { get; set; }
    
        /// <summary>User id</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UserId { get; set; }
    
        /// <summary>User 3rd party unique id</summary>
        [Newtonsoft.Json.JsonProperty("thirdPartyCorporateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThirdPartyCorporateId { get; set; }
    
        /// <summary>Invoice coupon name</summary>
        [Newtonsoft.Json.JsonProperty("couponName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CouponName { get; set; }
    
        /// <summary>Invoice coupon code</summary>
        [Newtonsoft.Json.JsonProperty("couponCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CouponCode { get; set; }
    
        /// <summary>Invoice created date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("createdAtUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAtUtc { get; set; }
    
        /// <summary>Invoice most recent transaction date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("mostRecentTransactionDateUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset MostRecentTransactionDateUtc { get; set; }
    
        /// <summary>Invoice billing line items</summary>
        [Newtonsoft.Json.JsonProperty("billingLineItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BillingLineItemModel> BillingLineItems { get; set; }
    
        /// <summary>Invoice payments</summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PaymentModel> Payments { get; set; }
    
        /// <summary>Invoice refunds</summary>
        [Newtonsoft.Json.JsonProperty("refunds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RefundModel> Refunds { get; set; }
    
        /// <summary>Invoice billing line items total amount</summary>
        [Newtonsoft.Json.JsonProperty("totalBilled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalBilled { get; set; }
    
        /// <summary>Invoice payments total amount</summary>
        [Newtonsoft.Json.JsonProperty("totalPaid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalPaid { get; set; }
    
        /// <summary>Invoice refunds total amount</summary>
        [Newtonsoft.Json.JsonProperty("totalRefunded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalRefunded { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BillingLineItemModel 
    {
        public BillingLineItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public BillingLineItemModel(double amount, int id, bool isManualAdjustment, bool isVat, int? applicationId = null, int? deletedApplicationId = null, string details = null, string notes = null, BillingLineItemTargetType? targetType = null)
        {
              Id = @id;
              ApplicationId = @applicationId;
              DeletedApplicationId = @deletedApplicationId;
              Amount = @amount;
              Notes = @notes;
              Details = @details;
              TargetType = @targetType;
              IsVat = @isVat;
              IsManualAdjustment = @isManualAdjustment;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("deletedApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeletedApplicationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }
    
        [Newtonsoft.Json.JsonProperty("targetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BillingLineItemTargetType? TargetType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsVat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isManualAdjustment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsManualAdjustment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentModel 
    {
        public PaymentModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public PaymentModel(double amount, bool canRefund, int id, bool isManualAdjustment, bool isPromissoryNote, PaymentMethod method, string billingName = null, string details = null, string externalPaymentTransactionData = null, string notes = null, string referenceNumber = null)
        {
              Id = @id;
              Amount = @amount;
              IsManualAdjustment = @isManualAdjustment;
              IsPromissoryNote = @isPromissoryNote;
              CanRefund = @canRefund;
              ExternalPaymentTransactionData = @externalPaymentTransactionData;
              BillingName = @billingName;
              ReferenceNumber = @referenceNumber;
              Notes = @notes;
              Method = @method;
              Details = @details;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isManualAdjustment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsManualAdjustment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isPromissoryNote", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPromissoryNote { get; set; }
    
        [Newtonsoft.Json.JsonProperty("canRefund", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CanRefund { get; set; }
    
        [Newtonsoft.Json.JsonProperty("externalPaymentTransactionData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalPaymentTransactionData { get; set; }
    
        [Newtonsoft.Json.JsonProperty("billingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentMethod Method { get; set; }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RefundModel 
    {
        public RefundModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public RefundModel(double amount, int id, string details = null, string notes = null)
        {
              Id = @id;
              Amount = @amount;
              Notes = @notes;
              Details = @details;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BillingLineItemListItemModel 
    {
        public BillingLineItemListItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public BillingLineItemListItemModel(double amount, System.DateTimeOffset createdAtUtc, int id, int invoiceId, bool isManualAdjustment, bool isVat, int? applicationId = null, int? deletedApplicationId = null, string details = null, string notes = null, BillingLineItemTargetType? targetType = null)
        {
              Id = @id;
              ApplicationId = @applicationId;
              DeletedApplicationId = @deletedApplicationId;
              InvoiceId = @invoiceId;
              Amount = @amount;
              Notes = @notes;
              Details = @details;
              TargetType = @targetType;
              IsVat = @isVat;
              IsManualAdjustment = @isManualAdjustment;
              CreatedAtUtc = @createdAtUtc;
        }
    
        /// <summary>Billing line item id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Related application id</summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId { get; set; }
    
        /// <summary>Related deleted application id</summary>
        [Newtonsoft.Json.JsonProperty("deletedApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeletedApplicationId { get; set; }
    
        /// <summary>Invoice id</summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InvoiceId { get; set; }
    
        /// <summary>Billing line item Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }
    
        /// <summary>Billing line item Notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        /// <summary>Billing line item Details</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }
    
        /// <summary>Billing line item target</summary>
        [Newtonsoft.Json.JsonProperty("targetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BillingLineItemTargetType? TargetType { get; set; }
    
        /// <summary>Is billing line item related to VAT</summary>
        [Newtonsoft.Json.JsonProperty("isVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsVat { get; set; }
    
        /// <summary>Is billing line item related to manual adjustment</summary>
        [Newtonsoft.Json.JsonProperty("isManualAdjustment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsManualAdjustment { get; set; }
    
        /// <summary>Billing line item created date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("createdAtUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAtUtc { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PaymentListItemModel 
    {
        public PaymentListItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public PaymentListItemModel(double amount, bool canRefund, System.DateTimeOffset createdAtUtc, int id, int invoiceId, bool isManualAdjustment, bool isPromissoryNote, PaymentMethod method, string billingName = null, string details = null, string externalPaymentTransactionData = null, string notes = null, string referenceNumber = null)
        {
              Id = @id;
              InvoiceId = @invoiceId;
              Amount = @amount;
              IsManualAdjustment = @isManualAdjustment;
              IsPromissoryNote = @isPromissoryNote;
              CanRefund = @canRefund;
              ExternalPaymentTransactionData = @externalPaymentTransactionData;
              BillingName = @billingName;
              ReferenceNumber = @referenceNumber;
              Notes = @notes;
              Method = @method;
              Details = @details;
              CreatedAtUtc = @createdAtUtc;
        }
    
        /// <summary>Payment id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Invoice id</summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InvoiceId { get; set; }
    
        /// <summary>Payment amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }
    
        /// <summary>Is payment related to manual adjustment</summary>
        [Newtonsoft.Json.JsonProperty("isManualAdjustment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsManualAdjustment { get; set; }
    
        /// <summary>Is payment related to promissory note</summary>
        [Newtonsoft.Json.JsonProperty("isPromissoryNote", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPromissoryNote { get; set; }
    
        /// <summary>Can payment be refund</summary>
        [Newtonsoft.Json.JsonProperty("canRefund", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CanRefund { get; set; }
    
        /// <summary>External payment transaction data</summary>
        [Newtonsoft.Json.JsonProperty("externalPaymentTransactionData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalPaymentTransactionData { get; set; }
    
        /// <summary>Payment billing name</summary>
        [Newtonsoft.Json.JsonProperty("billingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingName { get; set; }
    
        /// <summary>Payment reference number</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        /// <summary>Payment notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        /// <summary>Payment method</summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentMethod Method { get; set; }
    
        /// <summary>Payment details</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }
    
        /// <summary>Payment created date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("createdAtUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAtUtc { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RefundListItemModel 
    {
        public RefundListItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public RefundListItemModel(double amount, System.DateTimeOffset createdAtUtc, int id, int invoiceId, string details = null, string notes = null)
        {
              Id = @id;
              InvoiceId = @invoiceId;
              Amount = @amount;
              Notes = @notes;
              Details = @details;
              CreatedAtUtc = @createdAtUtc;
        }
    
        /// <summary>Refund id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Invoice id</summary>
        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InvoiceId { get; set; }
    
        /// <summary>Refund amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }
    
        /// <summary>Refund notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        /// <summary>Refund details</summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }
    
        /// <summary>Refund created date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("createdAtUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAtUtc { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PayByCheckRequest 
    {
        public PayByCheckRequest() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public PayByCheckRequest(double amount, string notes)
        {
              Amount = @amount;
              Notes = @notes;
        }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PayByCheckResponse 
    {
        public PayByCheckResponse() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public PayByCheckResponse(string jobUrl)
        {
              JobUrl = @jobUrl;
        }
    
        /// <summary>Payment finalization job status url</summary>
        [Newtonsoft.Json.JsonProperty("jobUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JobUrl { get; set; }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
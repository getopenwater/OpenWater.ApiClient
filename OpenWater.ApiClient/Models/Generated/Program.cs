//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.2.0 (NJsonSchema v10.0.24.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using OpenWater.ApiClient.Definitions;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace OpenWater.ApiClient.Program
{
    using System = global::System;
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApplicationCategoryModel 
    {
        public ApplicationCategoryModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public ApplicationCategoryModel(string code, int id, string name, string path)
        {
              Id = @id;
              Path = @path;
              Code = @code;
              Name = @name;
        }
    
        /// <summary>Application category id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Application category path</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        /// <summary>Application category code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Application category name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExportResponse 
    {
        public ExportResponse() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public ExportResponse(long jobId)
        {
              JobId = @jobId;
        }
    
        /// <summary>Job id</summary>
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long JobId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FormTemplateResponse 
    {
        public FormTemplateResponse() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public FormTemplateResponse(System.Collections.Generic.ICollection<Fields.FieldModelBase> fields)
        {
              Fields = @fields;
        }
    
        /// <summary>Form fields</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Fields.FieldModelBase> Fields { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GallerySettingsResponse 
    {
        public GallerySettingsResponse() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public GallerySettingsResponse(bool isSessionGalleryEnabled, System.Collections.Generic.ICollection<int> roundIdsWithEnabledApplicationGallery, SchedulerType? schedulerType = null)
        {
              RoundIdsWithEnabledApplicationGallery = @roundIdsWithEnabledApplicationGallery;
              IsSessionGalleryEnabled = @isSessionGalleryEnabled;
              SchedulerType = @schedulerType;
        }
    
        /// <summary>Round ids with enabled application gallery</summary>
        [Newtonsoft.Json.JsonProperty("roundIdsWithEnabledApplicationGallery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> RoundIdsWithEnabledApplicationGallery { get; set; }
    
        /// <summary>Is session gallery enabled</summary>
        [Newtonsoft.Json.JsonProperty("isSessionGalleryEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSessionGalleryEnabled { get; set; }
    
        /// <summary>Enabled scheduler type (null if disabled)</summary>
        [Newtonsoft.Json.JsonProperty("schedulerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SchedulerType? SchedulerType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProgramListItemModel 
    {
        public ProgramListItemModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public ProgramListItemModel(System.Collections.Generic.ICollection<ApplicationCategoryModel> applicationCategories, System.DateTimeOffset createdAtUtc, bool enableScheduler, bool enableSessions, int id, bool isArchived, string name, System.Collections.Generic.ICollection<RoundModel> rounds, string code = null, string tag = null)
        {
              Id = @id;
              Code = @code;
              Name = @name;
              Tag = @tag;
              IsArchived = @isArchived;
              EnableSessions = @enableSessions;
              EnableScheduler = @enableScheduler;
              CreatedAtUtc = @createdAtUtc;
              Rounds = @rounds;
              ApplicationCategories = @applicationCategories;
        }
    
        /// <summary>Program id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Program Code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Program Name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Program Tag</summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }
    
        /// <summary>Is program archived</summary>
        [Newtonsoft.Json.JsonProperty("isArchived", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsArchived { get; set; }
    
        /// <summary>Are sessions enabled in a program</summary>
        [Newtonsoft.Json.JsonProperty("enableSessions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableSessions { get; set; }
    
        /// <summary>Is scheduler enabled in a program</summary>
        [Newtonsoft.Json.JsonProperty("enableScheduler", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableScheduler { get; set; }
    
        /// <summary>Program created date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("createdAtUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAtUtc { get; set; }
    
        /// <summary>Program rounds</summary>
        [Newtonsoft.Json.JsonProperty("rounds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoundModel> Rounds { get; set; }
    
        /// <summary>Program application categories</summary>
        [Newtonsoft.Json.JsonProperty("applicationCategories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationCategoryModel> ApplicationCategories { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.24.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RoundModel 
    {
        public RoundModel() { }
    
        [Newtonsoft.Json.JsonConstructor]
        public RoundModel(int id, bool isJudgingOnly, string name, System.DateTimeOffset? judgingEndDateUtc = null, System.DateTimeOffset? judgingStartDateUtc = null, System.DateTimeOffset? submissionEndDateUtc = null, System.DateTimeOffset? submissionStartDateUtc = null)
        {
              Id = @id;
              Name = @name;
              IsJudgingOnly = @isJudgingOnly;
              SubmissionStartDateUtc = @submissionStartDateUtc;
              SubmissionEndDateUtc = @submissionEndDateUtc;
              JudgingStartDateUtc = @judgingStartDateUtc;
              JudgingEndDateUtc = @judgingEndDateUtc;
        }
    
        /// <summary>Round id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Round name</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Is round judging only</summary>
        [Newtonsoft.Json.JsonProperty("isJudgingOnly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsJudgingOnly { get; set; }
    
        /// <summary>Submission period start date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("submissionStartDateUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmissionStartDateUtc { get; set; }
    
        /// <summary>Submission period end date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("submissionEndDateUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmissionEndDateUtc { get; set; }
    
        /// <summary>Judging period start date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("judgingStartDateUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JudgingStartDateUtc { get; set; }
    
        /// <summary>Judging period end date (UTC)</summary>
        [Newtonsoft.Json.JsonProperty("judgingEndDateUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? JudgingEndDateUtc { get; set; }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108